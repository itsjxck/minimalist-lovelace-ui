---
card_itsjxck_person:
  template:
    - "icon_info_bg"
    - "ulm_translation_engine"
    - "custom_popup_itsjxck_person"
  variables:
    ulm_card_itsjxck_person_use_entity_picture: true
    ulm_card_itsjxck_person_multiline: false
    ulm_card_itsjxck_person_zones: []
    ulm_card_itsjxck_person_address: ""
    ulm_card_itsjxck_person_address_locality: ""
    ulm_card_itsjxck_person_driving_entity: ""
    ulm_card_itsjxck_person_battery_entity: ""
    ulm_card_itsjxck_person_battery_state_entity: ""
    ulm_card_itsjxck_person_commute_entity: ""
    ulm_card_itsjxck_person_cummute_icon: "mdi:car"
    ulm_card_itsjxck_person_focus_entity: ""
  triggers_update: "all"
  show_label: true
  show_name: true
  label: >
    [[[
      if (variables.ulm_card_itsjxck_person_address){
        return states[variables.ulm_card_itsjxck_person_address].state;
      } else if (variables.ulm_card_itsjxck_person_address_locality){
        return states[variables.ulm_card_itsjxck_person_address_locality].attributes.Locality;
      } else if (states[variables.ulm_card_itsjxck_person_driving_entity]?.state === "on") {
        let state = states[variables.ulm_card_itsjxck_person_entity].state;
        return `Driving - ${variables.ulm_translation_state}`;
      } else if (variables.ulm_card_itsjxck_person_zones.map((z) => states[z]?.attributes?.friendly_name).includes(states[variables.ulm_card_itsjxck_person_entity].state)) {
        let state = states[variables.ulm_card_itsjxck_person_entity].state;
        return state;
      } else {
        let state = states[variables.ulm_card_itsjxck_person_entity].state;
        return hass.resources[hass["language"]]["component.person" + ".state._." + state];
      }
    ]]]
  name: "[[[ return states[variables.ulm_card_itsjxck_person_entity].attributes.friendly_name ]]]"
  entity: "[[[ return variables.ulm_card_itsjxck_person_entity; ]]]"
  icon: "mdi:face-man"
  show_entity_picture: "[[[ return variables.ulm_card_itsjxck_person_use_entity_picture ]]]"
  entity_picture:
    "[[[ return variables.ulm_card_itsjxck_person_use_entity_picture != false ? states[variables.ulm_card_itsjxck_person_entity].attributes.entity_picture\
    \ : null ]]]"
  styles:
    grid:
      - grid-template-areas: >
          [[[
            return variables.ulm_card_itsjxck_person_multiline
              ? "'i n' 'i l' 'battery commute'"
              : "'i n battery' 'i l commute'"
          ]]]
      - grid-template-columns: >
          [[[
            return variables.ulm_card_itsjxck_person_multiline
              ? "min-content auto"
              : "min-content auto min-content"
          ]]]
      - grid-template-rows: "min-content min-content"
    icon:
      - color: "rgba(var(--color-theme),0.9)"
      - width: >
          [[[
            if (variables.ulm_card_itsjxck_person_use_entity_picture !== true){
              return "20px";
            } else {
              return "42px";
            }
          ]]]
      - place-self: >
          [[[
            if (variables.ulm_card_itsjxck_person_use_entity_picture !== true){
              return "center";
            } else {
              return "stretch stretch";
            }
          ]]]
    custom_fields:
      notification:
        - border-radius: "50%"
        - position: "absolute"
        - left: "38px"
        - top: "8px"
        - height: "16px"
        - width: "16px"
        - border: "2px solid var(--card-background-color)"
        - font-size: "12px"
        - line-height: "14px"
        - background-color: >
            [[[
              if (states[variables.ulm_card_itsjxck_person_driving_entity]?.state === "on") {
                return "rgba(var(--color-red),1)";
              } else if (states[variables.ulm_card_itsjxck_person_entity].state !== 'home') {
                return "rgba(var(--color-green),1)";
              } else {
                return "rgba(var(--color-blue),1)";
              }
            ]]]
      focus:
        - border-radius: "50%"
        - position: "absolute"
        - left: "8px"
        - top: "8px"
        - height: "16px"
        - width: "16px"
        - border: "2px solid var(--card-background-color)"
        - font-size: "12px"
        - line-height: "14px"
        - background-color: >
            [[[
              if (states[variables.ulm_card_itsjxck_person_focus_entity]?.state === "on") {
                return "rgba(var(--color-blue),1)";
              }
            ]]]
      battery:
        - align-self: "middle"
        - justify-self: "start"
        - display: "flex"
        - align-items: "center"
        - margin-top: >
            [[[
              return variables.ulm_card_itsjxck_person_multiline ? "6px" : "0";
            ]]]
        - font-size: "12px"
      commute:
        - align-self: "middle"
        - justify-self: "end"
        - display: "flex"
        - align-items: "center"
        - margin-top: "6px"
        - font-size: "12px"

  custom_fields:
    notification: >
      [[[
        let icon = "mdi:home-variant"

        if (states[variables.ulm_card_itsjxck_person_entity].state !== 'home') {
          icon = variables.ulm_card_itsjxck_person_zones.find((z) => states[z]?.attributes?.friendly_name === states[variables.ulm_card_itsjxck_person_entity].state)?.attributes?.icon ?? "mdi:home-minus"
        
          if (states[variables.ulm_card_itsjxck_person_driving_entity]?.state === "on") {
            icon = 'mdi:car'
          }
        }

        return '<ha-icon icon="' + icon + '" style="width: 10px; height: 10px; color: var(--primary-background-color);"></ha-icon>';
      ]]]
    focus: >
      [[[
        if (states[variables.ulm_card_itsjxck_person_focus_entity]?.state === "on") {
          let icon = states[variables.ulm_card_itsjxck_person_focus_entity]?.attributes?.icon
          return '<ha-icon icon="' + icon + '" style="width: 10px; height: 10px; color: var(--primary-background-color);"></ha-icon>';
        }
      ]]]
    battery: >
      [[[
        if (states[variables.ulm_card_itsjxck_person_battery_entity]?.state) {
          var battery = states[variables.ulm_card_itsjxck_person_battery_entity]?.state;
          var charging = states[variables.ulm_card_itsjxck_person_battery_state_entity]?.state.toLowerCase() === "charging";
          var iconBase = charging ? "mdi:battery-charging" : "mdi:battery"
          var roundedBattery = Math.ceil(battery / 10) * 10;
          var icon = roundedBattery === 100 ? iconBase : `${iconBase}-${roundedBattery}`;
          var foo = "mdi:battery"
          var color = "rgba(var(--color-green),1)";
          if (battery <= 50) {
            color = "rgba(var(--color-yellow),1)"
          } else if (battery <= 25) {
            color = "rgba(var(--color-red),1)"
          }
          return `
            <ha-icon icon="${icon}" style="width: 16px; height: 16px; font-size: 14px; color: ${color}; margin: 0 2px 0 0"></ha-icon>
            <span style="padding-top: 6px;">${battery}%</span>
          `;
        }
      ]]]
    commute: >
      [[[
        if (states[variables.ulm_card_itsjxck_person_commute_entity]?.state) {
          var icon = variables.ulm_card_itsjxck_person_commute_icon;
          var commute = states[variables.ulm_card_itsjxck_person_commute_entity]?.state;
          var color = "rgba(var(--color-green),1)";
          if (commute >= 30) {
            color = "rgba(var(--color-yellow),1)"
          }
          if (commute >= 60) {
            color = "rgba(var(--color-red),1)"
          }
          return `
            <ha-icon icon="${icon}" style="width: 16px; height: 16px; font-size: 14px; color: ${color}; margin: 0 2px 0 0"></ha-icon>
            <span style="padding-top: 6px;">${commute} min</span>
          `;
        }
      ]]]

custom_popup_itsjxck_person:
  tap_action:
    action: "fire-dom-event"
    browser_mod:
      command: "popup"
      title: "[[[ return states[variables.ulm_card_itsjxck_person_entity].attributes.friendly_name ]]]"
      style:
        $: >
          [[[
            if (hass.themes.theme.includes("desktop")){
              var dialog = `
                .mdc-dialog__surface{
                  border-radius: var(--border-radius) !important;
                }
              `;
            } else{
              var dialog = "";
            }
            return `
              *{
                --secondary-background-color: none !important;
              }
              ${dialog}
            `;
          ]]]
        hui-vertical-stack-card:
          $: >
            button-card {
              align-self: center;
              padding: 0.2em 0 2.3em 0;
            }
            hui-entities-card{
              padding: 0.8em 1.4em;
            }
          $hui-entities-card$: >
            ha-card{
              box-shadow: none;
            }
          $hui-history-graph-card$: >
            .content {
              padding: 0 2.4em !important;
            }
            ha-card{
              box-shadow: none;
            }
          $hui-glance-card$: >
            ha-card{
              box-shadow: none;
            }
          $hui-map-card:
            $: >
              ha-icon-button {
                color: rgba(var(--color-blue),1);
              }
            $ha-map:
              $: >
                .leaflet-control-attribution {
                  display: none;
                }
                .leaflet-touch .leaflet-control-layers, .leaflet-touch .leaflet-bar {
                  border: 2px solid rgba(var(--color-blue),0.4) !important;
                }
                .leaflet-bar a {
                  background-color: rgba(var(--color-blue),0.2) !important;
                  color: rgba(var(--color-blue),1) !important;
                }
                .leaflet-bar a:first-child {
                  border-bottom: 2px solid rgba(var(--color-blue),0.4) !important;
                }
                .leaflet-pane.leaflet-tile-pane {
                  filter: contrast(95%);
                }
      card:
        type: "vertical-stack"
        cards:
          - type: "entities"
            entities:
              - entity: "[[[ return variables.ulm_card_itsjxck_person_entity; ]]]"
                secondary_info: "last-changed"
          - type: "history-graph"
            entities:
              - entity: "[[[ return variables.ulm_card_itsjxck_person_entity; ]]]"
          - type: "map"
            aspect_ratio: "12x10"
            default_zoom: 16
            entities: "[[[ return [variables.ulm_card_itsjxck_person_gps_tracker]; ]]]"
